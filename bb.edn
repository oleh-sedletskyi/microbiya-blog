#_{:tasks
   {nrepl {:doc "run nrepl +flowstorm profile"
           :task (shell "clojure -M:flowstorm:dev -m nrepl.cmdline")}
    nrepl-no-flowstorm {:doc "start nrepl"
                        :task (shell "clojure -M:dev -m nrepl.cmdline")}
    docker-start {:doc "start docker sql db locally"
                  :task (shell "docker start joomla-db")}
    docker-stop {:doc "stop docker"
                 :task (shell "docker stop joomla-db")}
    outdated {:doc "check for outdated libs"
              :task (shell "clojure -Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}}' -M -m antq.core")}}}

{:paths ["src" "resources"]
 :deps {markdown-clj/markdown-clj {:mvn/version "1.12.3"}
        io.github.escherize/huff {:mvn/version "0.2.13"}}
 :pods {org.babashka/fswatcher {:version "0.0.5"}}
 :tasks {build {:requires [[babashka.fs :as fs]]
                :task
                (do
                  (println "Building...")
                  (shell "clj -X blog/process-posts")
                  (fs/create-dirs "static")
                  (fs/copy-tree "./public" "static" {:replace-existing true})
                  (fs/copy-tree "./resources/assets" "static" {:replace-existing true})
                  (spit "static/CNAME" "micro.907050.xyz"))}
         serve {:extra-deps {org.babashka/http-server {:mvn/version "0.1.13"}}
                :requires [[babashka.http-server :as http]]
                :task (do
                        (run 'build)
                        (http/serve {:port 7777 :dir "static"})
                        (deref (promise)))}
         watch {:requires [[pod.babashka.fswatcher :as fw]
                           [babashka.fs :as fs]]
                :task (do
                        (println "Watching...")
                        (doseq [dir ["content" "resources" "template"]]
                          (fw/watch dir
                                    (fn [event]
                                      (println "Reloading...")
                                      ;; reload all files
                                      (->> (concat (fs/glob "src" "**.md") (fs/glob "src" "**.html"))
                                           (map (fn [f]
                                                  (load-file (.toString f))))
                                           doall)
                                      (run 'build))
                                    {:recursive true
                                     :delay-ms 250}))
                        (run 'serve))}}}
